pub use deposit_contract::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod deposit_contract {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[],\"type\":\"error\",\"name\":\"MerkleTreeFull\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Initialized\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"depositCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getDepositRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"leafType\",\"type\":\"uint8\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"originNetwork\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"originAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"destinationNetwork\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"getLeafValue\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"leafHash\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32[32]\",\"name\":\"smtProof\",\"type\":\"bytes32[32]\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"verifyMerkleProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static DEPOSITCONTRACT_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        4,
        95,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        76,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        45,
        253,
        240,
        181,
        20,
        97,
        0,
        81,
        87,
        128,
        99,
        58,
        224,
        80,
        71,
        20,
        97,
        0,
        109,
        87,
        128,
        99,
        62,
        25,
        112,
        67,
        20,
        97,
        0,
        117,
        87,
        128,
        99,
        251,
        87,
        8,
        52,
        20,
        97,
        1,
        21,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        90,
        96,
        83,
        84,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        90,
        97,
        1,
        56,
        86,
        91,
        97,
        0,
        90,
        97,
        0,
        131,
        54,
        96,
        4,
        97,
        3,
        30,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        248,
        27,
        3,
        25,
        96,
        248,
        137,
        144,
        27,
        22,
        96,
        32,
        130,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        96,
        224,
        136,
        129,
        27,
        130,
        22,
        96,
        33,
        132,
        1,
        82,
        107,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        25,
        96,
        96,
        137,
        129,
        27,
        130,
        22,
        96,
        37,
        134,
        1,
        82,
        145,
        136,
        144,
        27,
        144,
        146,
        22,
        96,
        57,
        132,
        1,
        82,
        133,
        144,
        27,
        22,
        96,
        61,
        130,
        1,
        82,
        96,
        81,
        129,
        1,
        131,
        144,
        82,
        96,
        113,
        129,
        1,
        130,
        144,
        82,
        96,
        0,
        144,
        96,
        145,
        1,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        144,
        80,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        1,
        40,
        97,
        1,
        35,
        54,
        96,
        4,
        97,
        3,
        158,
        86,
        91,
        97,
        2,
        21,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        100,
        86,
        91,
        96,
        83,
        84,
        96,
        0,
        144,
        129,
        144,
        129,
        128,
        91,
        96,
        32,
        129,
        16,
        21,
        97,
        2,
        12,
        87,
        128,
        131,
        144,
        28,
        96,
        1,
        22,
        96,
        1,
        3,
        97,
        1,
        160,
        87,
        96,
        51,
        129,
        96,
        32,
        129,
        16,
        97,
        1,
        109,
        87,
        97,
        1,
        109,
        97,
        3,
        236,
        86,
        91,
        1,
        84,
        96,
        64,
        128,
        81,
        96,
        32,
        129,
        1,
        146,
        144,
        146,
        82,
        129,
        1,
        133,
        144,
        82,
        96,
        96,
        1,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        147,
        80,
        97,
        1,
        205,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        32,
        129,
        1,
        134,
        144,
        82,
        144,
        129,
        1,
        131,
        144,
        82,
        96,
        96,
        1,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        147,
        80,
        91,
        96,
        64,
        128,
        81,
        96,
        32,
        129,
        1,
        132,
        144,
        82,
        144,
        129,
        1,
        131,
        144,
        82,
        96,
        96,
        1,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        145,
        80,
        128,
        128,
        97,
        2,
        4,
        144,
        97,
        4,
        2,
        86,
        91,
        145,
        80,
        80,
        97,
        1,
        67,
        86,
        91,
        80,
        145,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        132,
        129,
        91,
        96,
        32,
        129,
        16,
        21,
        97,
        2,
        226,
        87,
        96,
        1,
        99,
        255,
        255,
        255,
        255,
        134,
        22,
        130,
        28,
        129,
        22,
        144,
        3,
        97,
        2,
        133,
        87,
        133,
        129,
        96,
        32,
        129,
        16,
        97,
        2,
        72,
        87,
        97,
        2,
        72,
        97,
        3,
        236,
        86,
        91,
        96,
        32,
        2,
        1,
        53,
        130,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        2,
        104,
        146,
        145,
        144,
        145,
        130,
        82,
        96,
        32,
        130,
        1,
        82,
        96,
        64,
        1,
        144,
        86,
        91,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        145,
        80,
        97,
        2,
        208,
        86,
        91,
        129,
        134,
        130,
        96,
        32,
        129,
        16,
        97,
        2,
        152,
        87,
        97,
        2,
        152,
        97,
        3,
        236,
        86,
        91,
        96,
        32,
        2,
        1,
        53,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        2,
        183,
        146,
        145,
        144,
        145,
        130,
        82,
        96,
        32,
        130,
        1,
        82,
        96,
        64,
        1,
        144,
        86,
        91,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        145,
        80,
        91,
        128,
        97,
        2,
        218,
        129,
        97,
        4,
        2,
        86,
        91,
        145,
        80,
        80,
        97,
        2,
        26,
        86,
        91,
        80,
        144,
        145,
        20,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        128,
        53,
        99,
        255,
        255,
        255,
        255,
        129,
        22,
        129,
        20,
        97,
        3,
        2,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        3,
        2,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        224,
        136,
        138,
        3,
        18,
        21,
        97,
        3,
        57,
        87,
        96,
        0,
        128,
        253,
        91,
        135,
        53,
        96,
        255,
        129,
        22,
        129,
        20,
        97,
        3,
        74,
        87,
        96,
        0,
        128,
        253,
        91,
        150,
        80,
        97,
        3,
        88,
        96,
        32,
        137,
        1,
        97,
        2,
        238,
        86,
        91,
        149,
        80,
        97,
        3,
        102,
        96,
        64,
        137,
        1,
        97,
        3,
        7,
        86,
        91,
        148,
        80,
        97,
        3,
        116,
        96,
        96,
        137,
        1,
        97,
        2,
        238,
        86,
        91,
        147,
        80,
        97,
        3,
        130,
        96,
        128,
        137,
        1,
        97,
        3,
        7,
        86,
        91,
        146,
        80,
        96,
        160,
        136,
        1,
        53,
        145,
        80,
        96,
        192,
        136,
        1,
        53,
        144,
        80,
        146,
        149,
        152,
        145,
        148,
        151,
        80,
        146,
        149,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        97,
        4,
        96,
        133,
        135,
        3,
        18,
        21,
        97,
        3,
        181,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        147,
        80,
        97,
        4,
        32,
        133,
        1,
        134,
        129,
        17,
        21,
        97,
        3,
        203,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        134,
        1,
        147,
        80,
        97,
        3,
        218,
        129,
        97,
        2,
        238,
        86,
        91,
        148,
        151,
        147,
        150,
        80,
        147,
        148,
        97,
        4,
        64,
        1,
        53,
        147,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        1,
        130,
        1,
        97,
        4,
        34,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        96,
        1,
        1,
        144,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        227,
        239,
        224,
        150,
        244,
        191,
        213,
        86,
        56,
        159,
        0,
        163,
        171,
        196,
        236,
        253,
        139,
        251,
        224,
        150,
        182,
        171,
        254,
        234,
        89,
        252,
        22,
        148,
        224,
        39,
        0,
        236,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static DEPOSITCONTRACT_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        76,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        45,
        253,
        240,
        181,
        20,
        97,
        0,
        81,
        87,
        128,
        99,
        58,
        224,
        80,
        71,
        20,
        97,
        0,
        109,
        87,
        128,
        99,
        62,
        25,
        112,
        67,
        20,
        97,
        0,
        117,
        87,
        128,
        99,
        251,
        87,
        8,
        52,
        20,
        97,
        1,
        21,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        90,
        96,
        83,
        84,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        90,
        97,
        1,
        56,
        86,
        91,
        97,
        0,
        90,
        97,
        0,
        131,
        54,
        96,
        4,
        97,
        3,
        30,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        248,
        27,
        3,
        25,
        96,
        248,
        137,
        144,
        27,
        22,
        96,
        32,
        130,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        96,
        224,
        136,
        129,
        27,
        130,
        22,
        96,
        33,
        132,
        1,
        82,
        107,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        25,
        96,
        96,
        137,
        129,
        27,
        130,
        22,
        96,
        37,
        134,
        1,
        82,
        145,
        136,
        144,
        27,
        144,
        146,
        22,
        96,
        57,
        132,
        1,
        82,
        133,
        144,
        27,
        22,
        96,
        61,
        130,
        1,
        82,
        96,
        81,
        129,
        1,
        131,
        144,
        82,
        96,
        113,
        129,
        1,
        130,
        144,
        82,
        96,
        0,
        144,
        96,
        145,
        1,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        144,
        80,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        1,
        40,
        97,
        1,
        35,
        54,
        96,
        4,
        97,
        3,
        158,
        86,
        91,
        97,
        2,
        21,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        100,
        86,
        91,
        96,
        83,
        84,
        96,
        0,
        144,
        129,
        144,
        129,
        128,
        91,
        96,
        32,
        129,
        16,
        21,
        97,
        2,
        12,
        87,
        128,
        131,
        144,
        28,
        96,
        1,
        22,
        96,
        1,
        3,
        97,
        1,
        160,
        87,
        96,
        51,
        129,
        96,
        32,
        129,
        16,
        97,
        1,
        109,
        87,
        97,
        1,
        109,
        97,
        3,
        236,
        86,
        91,
        1,
        84,
        96,
        64,
        128,
        81,
        96,
        32,
        129,
        1,
        146,
        144,
        146,
        82,
        129,
        1,
        133,
        144,
        82,
        96,
        96,
        1,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        147,
        80,
        97,
        1,
        205,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        32,
        129,
        1,
        134,
        144,
        82,
        144,
        129,
        1,
        131,
        144,
        82,
        96,
        96,
        1,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        147,
        80,
        91,
        96,
        64,
        128,
        81,
        96,
        32,
        129,
        1,
        132,
        144,
        82,
        144,
        129,
        1,
        131,
        144,
        82,
        96,
        96,
        1,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        145,
        80,
        128,
        128,
        97,
        2,
        4,
        144,
        97,
        4,
        2,
        86,
        91,
        145,
        80,
        80,
        97,
        1,
        67,
        86,
        91,
        80,
        145,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        132,
        129,
        91,
        96,
        32,
        129,
        16,
        21,
        97,
        2,
        226,
        87,
        96,
        1,
        99,
        255,
        255,
        255,
        255,
        134,
        22,
        130,
        28,
        129,
        22,
        144,
        3,
        97,
        2,
        133,
        87,
        133,
        129,
        96,
        32,
        129,
        16,
        97,
        2,
        72,
        87,
        97,
        2,
        72,
        97,
        3,
        236,
        86,
        91,
        96,
        32,
        2,
        1,
        53,
        130,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        2,
        104,
        146,
        145,
        144,
        145,
        130,
        82,
        96,
        32,
        130,
        1,
        82,
        96,
        64,
        1,
        144,
        86,
        91,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        145,
        80,
        97,
        2,
        208,
        86,
        91,
        129,
        134,
        130,
        96,
        32,
        129,
        16,
        97,
        2,
        152,
        87,
        97,
        2,
        152,
        97,
        3,
        236,
        86,
        91,
        96,
        32,
        2,
        1,
        53,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        2,
        183,
        146,
        145,
        144,
        145,
        130,
        82,
        96,
        32,
        130,
        1,
        82,
        96,
        64,
        1,
        144,
        86,
        91,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        145,
        80,
        91,
        128,
        97,
        2,
        218,
        129,
        97,
        4,
        2,
        86,
        91,
        145,
        80,
        80,
        97,
        2,
        26,
        86,
        91,
        80,
        144,
        145,
        20,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        128,
        53,
        99,
        255,
        255,
        255,
        255,
        129,
        22,
        129,
        20,
        97,
        3,
        2,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        3,
        2,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        224,
        136,
        138,
        3,
        18,
        21,
        97,
        3,
        57,
        87,
        96,
        0,
        128,
        253,
        91,
        135,
        53,
        96,
        255,
        129,
        22,
        129,
        20,
        97,
        3,
        74,
        87,
        96,
        0,
        128,
        253,
        91,
        150,
        80,
        97,
        3,
        88,
        96,
        32,
        137,
        1,
        97,
        2,
        238,
        86,
        91,
        149,
        80,
        97,
        3,
        102,
        96,
        64,
        137,
        1,
        97,
        3,
        7,
        86,
        91,
        148,
        80,
        97,
        3,
        116,
        96,
        96,
        137,
        1,
        97,
        2,
        238,
        86,
        91,
        147,
        80,
        97,
        3,
        130,
        96,
        128,
        137,
        1,
        97,
        3,
        7,
        86,
        91,
        146,
        80,
        96,
        160,
        136,
        1,
        53,
        145,
        80,
        96,
        192,
        136,
        1,
        53,
        144,
        80,
        146,
        149,
        152,
        145,
        148,
        151,
        80,
        146,
        149,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        97,
        4,
        96,
        133,
        135,
        3,
        18,
        21,
        97,
        3,
        181,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        147,
        80,
        97,
        4,
        32,
        133,
        1,
        134,
        129,
        17,
        21,
        97,
        3,
        203,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        134,
        1,
        147,
        80,
        97,
        3,
        218,
        129,
        97,
        2,
        238,
        86,
        91,
        148,
        151,
        147,
        150,
        80,
        147,
        148,
        97,
        4,
        64,
        1,
        53,
        147,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        1,
        130,
        1,
        97,
        4,
        34,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        96,
        1,
        1,
        144,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        227,
        239,
        224,
        150,
        244,
        191,
        213,
        86,
        56,
        159,
        0,
        163,
        171,
        196,
        236,
        253,
        139,
        251,
        224,
        150,
        182,
        171,
        254,
        234,
        89,
        252,
        22,
        148,
        224,
        39,
        0,
        236,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static DEPOSITCONTRACT_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct DepositContract<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for DepositContract<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for DepositContract<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for DepositContract<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for DepositContract<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(DepositContract))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> DepositContract<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                DEPOSITCONTRACT_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                DEPOSITCONTRACT_ABI.clone(),
                DEPOSITCONTRACT_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `depositCount` (0x2dfdf0b5) function
        pub fn deposit_count(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([45, 253, 240, 181], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getDepositRoot` (0x3ae05047) function
        pub fn get_deposit_root(&self) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([58, 224, 80, 71], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getLeafValue` (0x3e197043) function
        pub fn get_leaf_value(
            &self,
            leaf_type: u8,
            origin_network: u32,
            origin_address: ::ethers::core::types::Address,
            destination_network: u32,
            destination_address: ::ethers::core::types::Address,
            amount: ::ethers::core::types::U256,
            metadata_hash: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash(
                    [62, 25, 112, 67],
                    (
                        leaf_type,
                        origin_network,
                        origin_address,
                        destination_network,
                        destination_address,
                        amount,
                        metadata_hash,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `verifyMerkleProof` (0xfb570834) function
        pub fn verify_merkle_proof(
            &self,
            leaf_hash: [u8; 32],
            smt_proof: [[u8; 32]; 32],
            index: u32,
            root: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([251, 87, 8, 52], (leaf_hash, smt_proof, index, root))
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `Initialized` event
        pub fn initialized_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, InitializedFilter>
        {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, InitializedFilter>
        {
            self.0
                .event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
        for DepositContract<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `MerkleTreeFull` with signature `MerkleTreeFull()` and selector `0xef5ccf66`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[etherror(name = "MerkleTreeFull", abi = "MerkleTreeFull()")]
    pub struct MerkleTreeFull;
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethevent(name = "Initialized", abi = "Initialized(uint8)")]
    pub struct InitializedFilter {
        pub version: u8,
    }
    ///Container type for all input parameters for the `depositCount` function with signature `depositCount()` and selector `0x2dfdf0b5`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "depositCount", abi = "depositCount()")]
    pub struct DepositCountCall;
    ///Container type for all input parameters for the `getDepositRoot` function with signature `getDepositRoot()` and selector `0x3ae05047`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "getDepositRoot", abi = "getDepositRoot()")]
    pub struct GetDepositRootCall;
    ///Container type for all input parameters for the `getLeafValue` function with signature `getLeafValue(uint8,uint32,address,uint32,address,uint256,bytes32)` and selector `0x3e197043`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "getLeafValue",
        abi = "getLeafValue(uint8,uint32,address,uint32,address,uint256,bytes32)"
    )]
    pub struct GetLeafValueCall {
        pub leaf_type: u8,
        pub origin_network: u32,
        pub origin_address: ::ethers::core::types::Address,
        pub destination_network: u32,
        pub destination_address: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
        pub metadata_hash: [u8; 32],
    }
    ///Container type for all input parameters for the `verifyMerkleProof` function with signature `verifyMerkleProof(bytes32,bytes32[32],uint32,bytes32)` and selector `0xfb570834`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "verifyMerkleProof",
        abi = "verifyMerkleProof(bytes32,bytes32[32],uint32,bytes32)"
    )]
    pub struct VerifyMerkleProofCall {
        pub leaf_hash: [u8; 32],
        pub smt_proof: [[u8; 32]; 32],
        pub index: u32,
        pub root: [u8; 32],
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum DepositContractCalls {
        DepositCount(DepositCountCall),
        GetDepositRoot(GetDepositRootCall),
        GetLeafValue(GetLeafValueCall),
        VerifyMerkleProof(VerifyMerkleProofCall),
    }
    impl ::ethers::core::abi::AbiDecode for DepositContractCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <DepositCountCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::DepositCount(decoded));
            }
            if let Ok(decoded) =
                <GetDepositRootCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::GetDepositRoot(decoded));
            }
            if let Ok(decoded) = <GetLeafValueCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::GetLeafValue(decoded));
            }
            if let Ok(decoded) =
                <VerifyMerkleProofCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::VerifyMerkleProof(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for DepositContractCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::DepositCount(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::GetDepositRoot(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::GetLeafValue(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::VerifyMerkleProof(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for DepositContractCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::DepositCount(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetDepositRoot(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetLeafValue(element) => ::core::fmt::Display::fmt(element, f),
                Self::VerifyMerkleProof(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<DepositCountCall> for DepositContractCalls {
        fn from(value: DepositCountCall) -> Self {
            Self::DepositCount(value)
        }
    }
    impl ::core::convert::From<GetDepositRootCall> for DepositContractCalls {
        fn from(value: GetDepositRootCall) -> Self {
            Self::GetDepositRoot(value)
        }
    }
    impl ::core::convert::From<GetLeafValueCall> for DepositContractCalls {
        fn from(value: GetLeafValueCall) -> Self {
            Self::GetLeafValue(value)
        }
    }
    impl ::core::convert::From<VerifyMerkleProofCall> for DepositContractCalls {
        fn from(value: VerifyMerkleProofCall) -> Self {
            Self::VerifyMerkleProof(value)
        }
    }
    ///Container type for all return fields from the `depositCount` function with signature `depositCount()` and selector `0x2dfdf0b5`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct DepositCountReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `getDepositRoot` function with signature `getDepositRoot()` and selector `0x3ae05047`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetDepositRootReturn(pub [u8; 32]);
    ///Container type for all return fields from the `getLeafValue` function with signature `getLeafValue(uint8,uint32,address,uint32,address,uint256,bytes32)` and selector `0x3e197043`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetLeafValueReturn(pub [u8; 32]);
    ///Container type for all return fields from the `verifyMerkleProof` function with signature `verifyMerkleProof(bytes32,bytes32[32],uint32,bytes32)` and selector `0xfb570834`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct VerifyMerkleProofReturn(pub bool);
}

@startuml
skinparam componentStyle rectangle

frame Legend {
  component "zkevm-node "as is"" as Original #PaleGreen
  component "zkevm-node modified" as Modified #LightPink
  component "new" as New
}

New -[hidden]r-> Original
Original -[hidden]r-> Modified

component User #White
package "HotShot\n(other instances)" as HotShotExternal {
  component "Gossip" as GossipExternal
}

package "Decentralized Sequencer" {
  package "zkEVM app" as zkApp {
    component "Query Service" as QueryService
    component "Submit API" as Submit
    package "Txn-ordering HotShot app" as App {
      package HotShot {
        component "Gossip" as GossipInternal
        component "Events" as HotShotEvents
      }
    }
    component "HotShot Commitment" as HotShotCommitment
    note right of HotShotCommitment
      Permissionless service. Monitors
      batches and posts them to the
      HotShot contract alongside QCs.
    end note
  }
}

package "L2 Adaptor" as Adaptor {
  component "JSON-RPC\n(submit only)" as AdaptorSubmit
}

package "Ethereum L1" as L1 {
  component "Rollup Contract" as Rollup #LightPink
  note left of Rollup
    Contract modified to no
    longer store batches.
  end note
  component "HotShot Contract" as HotShotContract
}


package "L2 (zkevm-node)" as L2 {
  component JsonRPC #PaleGreen
  note left of JsonRPC
    Configured to forward
    transactions to the Submit
    API of the L2 adaptor.
  end note
  database L2DB #PaleGreen [
    L2 Blockchain DB
  ]
  package "Polygon zkEVM Prover" as zkEVMProver {
    component Prover #PaleGreen
    component Executor #PaleGreen
    database Tree #PaleGreen [
      L2 State DB
      Merkle Tree
    ]
  }
  component Etherman #LightPink
  note left of Etherman
    Etherman modified to fetch
    batch commits, not batches,
    from contract, and to fetch
    the full batches from the
    HotShot Query Service.
  end note
  component Aggregator #PaleGreen
  component "State\nLibrary" as State #PaleGreen
  component Synchronizer #PaleGreen
}

User -left-> JsonRPC: EVM txn\nEVM query

JsonRPC -> AdaptorSubmit: EVM txn
AdaptorSubmit -> Submit: EVM txn

GossipInternal <-up-> GossipExternal

Rollup <- HotShotContract: batch commit
JsonRPC --> State: EVM query

State -> L2DB: read
State --> Tree: accounts
State --> Executor: call, etc.

Aggregator --> State: fetch\nprover\ninput
Aggregator --> Etherman: proof
Aggregator --> Prover: generate\nproof
Etherman --> Rollup: proof
Etherman <-right- HotShotContract: batch commit
Etherman <- Adaptor: batch transactions\nfiltered by rollup ID
Adaptor <- QueryService: batch
Synchronizer <-- Etherman: batch\nglobal exit root
State <-- Synchronizer: batch\nglobal exit root\nstate

Submit -> App: wrap in HotShot txn
HotShotEvents -down-> QueryService

QueryService -down-> HotShotCommitment: batch commit, QC
HotShotCommitment -down-> HotShotContract: batch commit, QC

@enduml

@startuml
skinparam componentStyle rectangle

frame Legend {
  component "zkevm-node "as is"" as Original #PaleGreen
  component "zkevm-node modified" as Modified #LightPink
  component "new" as New
}

New -[hidden]r-> Original
Original -[hidden]r-> Modified

component User #White
package "HotShot\n(other instances)" as HotShotExternal {
  component "Gossip" as GossipExternal
}

package "Decentralized Sequencer" {
  package "zkEVM app" as zkApp {
    component "Query Service" as QueryService
    component "Submit API" as Submit
    package "Txn-ordering HotShot app" as App {
      package HotShot {
        component "Gossip" as GossipInternal
        component "Events" as HotShotEvents
      }
    }
  }
}

package "Ethereum L1" as L1 {
  component "Rollup Contract" as Rollup #LightPink
  note left of Rollup
    Contract modified to store batch commitments
    instead of batches. ForceBatches replaced by
    Sequence, which validates a QC and stores a
    batch commitment (associated with a GER).
  end note
  ' component "Bridge L1" as BridgeL1 #PaleGreen
}


package "L2 (zkevm-node)" as L2 {
  component JsonRPC #LightPink
  note left of JsonRPC
    Modified to forward transactions
    to the HotShot submit API.
  end note
  database L2DB #PaleGreen [
    L2 Blockchain DB
  ]
  package "Polygon zkEVM Prover" as PolygonZkEVMProver {
    component Prover #PaleGreen
    component Executor #PaleGreen
    database Tree #PaleGreen [
      L2 State DB
      Merkle Tree
    ]
  }
  'component "Bridge L2" as BridgeL2 #PaleGreen
  component Etherman #LightPink
  note left of Etherman
    Etherman modified to fetch batch commits,
    not batches, from contract, and to fetch
    the full batches from the HotShot Query Service.
  end note
  component Aggregator #PaleGreen
  component "State\nLibrary" as State #PaleGreen
  component Synchronizer #PaleGreen
  component "Batch Writer" as BatchWriter
  note bottom of BatchWriter
    New component which scans blocks from
    HotShot and writes them to the contract.
  end note
}

User -down-> JsonRPC: EVM txn\nEVM query
'User -[hidden]> Submit
'positions the User box in a better place
'User -[hidden]> L2

JsonRPC -> Submit: EVM txn

GossipInternal <-> GossipExternal

QueryService -> BatchWriter: batch_commit, QC
BatchWriter -> Rollup: Sequence(batch_commit, QC)

JsonRPC --> State: EVM query

State -> L2DB: read
State --> Tree: accounts
State --> Executor: call, etc.

Aggregator --> State: fetch\nprover\ninput
Aggregator --> Etherman: proof
Aggregator --> Prover: generate\nproof
Etherman --> Rollup: proof
Etherman <- Rollup: batch commit\nglobal exit root
Etherman <- QueryService: batch
Synchronizer <-- Etherman: batch\nglobal exit root
State <-- Synchronizer: batch\nglobal exit root\nstate

' Prover ..> BridgeL2
' User --> BridgeL1
Submit -up-> App: wrap in HotShot txn
HotShotEvents -down-> QueryService

@enduml

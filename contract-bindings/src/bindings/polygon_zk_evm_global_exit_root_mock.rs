pub use polygon_zk_evm_global_exit_root_mock::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod polygon_zk_evm_global_exit_root_mock {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rollupAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_bridgeAddress\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyAllowedContracts\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"mainnetExitRoot\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"rollupExitRoot\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"UpdateGlobalExitRoot\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"bridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLastGlobalExitRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"globalExitRootMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastMainnetExitRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastRollupExitRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rollupAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"globalExitRoot\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setGlobalExitRoot\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLastGlobalExitRoot\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateExitRoot\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static POLYGONZKEVMGLOBALEXITROOTMOCK_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(|| {
        ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
    });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        192,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        97,
        4,
        27,
        56,
        3,
        128,
        97,
        4,
        27,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        97,
        0,
        47,
        145,
        97,
        0,
        98,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        145,
        130,
        22,
        96,
        160,
        82,
        22,
        96,
        128,
        82,
        97,
        0,
        149,
        86,
        91,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        0,
        93,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        0,
        117,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        126,
        131,
        97,
        0,
        70,
        86,
        91,
        145,
        80,
        97,
        0,
        140,
        96,
        32,
        132,
        1,
        97,
        0,
        70,
        86,
        91,
        144,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        128,
        81,
        96,
        160,
        81,
        97,
        3,
        83,
        97,
        0,
        200,
        96,
        0,
        57,
        96,
        0,
        129,
        129,
        97,
        1,
        34,
        1,
        82,
        97,
        1,
        240,
        1,
        82,
        96,
        0,
        129,
        129,
        97,
        1,
        97,
        1,
        82,
        97,
        1,
        180,
        1,
        82,
        97,
        3,
        83,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        131,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        1,
        253,
        144,
        68,
        20,
        97,
        0,
        136,
        87,
        128,
        99,
        5,
        26,
        158,
        40,
        20,
        97,
        0,
        164,
        87,
        128,
        99,
        37,
        123,
        54,
        50,
        20,
        97,
        0,
        185,
        87,
        128,
        99,
        49,
        156,
        247,
        53,
        20,
        97,
        0,
        217,
        87,
        128,
        99,
        51,
        214,
        36,
        125,
        20,
        97,
        0,
        226,
        87,
        128,
        99,
        62,
        214,
        145,
        239,
        20,
        97,
        0,
        245,
        87,
        128,
        99,
        91,
        206,
        246,
        115,
        20,
        97,
        0,
        253,
        87,
        128,
        99,
        94,
        198,
        168,
        223,
        20,
        97,
        1,
        29,
        87,
        128,
        99,
        163,
        197,
        115,
        235,
        20,
        97,
        1,
        92,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        145,
        96,
        0,
        84,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        183,
        97,
        0,
        178,
        54,
        96,
        4,
        97,
        2,
        226,
        86,
        91,
        97,
        1,
        131,
        86,
        91,
        0,
        91,
        97,
        0,
        145,
        97,
        0,
        199,
        54,
        96,
        4,
        97,
        2,
        226,
        86,
        91,
        96,
        2,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        97,
        0,
        145,
        96,
        1,
        84,
        129,
        86,
        91,
        97,
        0,
        183,
        97,
        0,
        240,
        54,
        96,
        4,
        97,
        2,
        226,
        86,
        91,
        97,
        1,
        164,
        86,
        91,
        97,
        0,
        145,
        97,
        2,
        161,
        86,
        91,
        97,
        0,
        183,
        97,
        1,
        11,
        54,
        96,
        4,
        97,
        2,
        251,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        144,
        145,
        32,
        85,
        86,
        91,
        97,
        1,
        68,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        155,
        86,
        91,
        97,
        1,
        68,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        128,
        96,
        2,
        96,
        0,
        97,
        1,
        144,
        97,
        2,
        161,
        86,
        91,
        129,
        82,
        96,
        32,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        64,
        1,
        96,
        0,
        32,
        85,
        80,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        51,
        3,
        97,
        1,
        230,
        87,
        80,
        96,
        1,
        130,
        144,
        85,
        129,
        97,
        2,
        60,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        51,
        3,
        97,
        2,
        35,
        87,
        96,
        0,
        131,
        144,
        85,
        130,
        145,
        80,
        97,
        2,
        60,
        86,
        91,
        96,
        64,
        81,
        99,
        180,
        147,
        101,
        221,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        97,
        2,
        72,
        130,
        132,
        97,
        2,
        182,
        86,
        91,
        96,
        0,
        129,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        145,
        146,
        80,
        3,
        97,
        2,
        155,
        87,
        96,
        0,
        129,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        128,
        130,
        32,
        66,
        144,
        85,
        81,
        132,
        145,
        132,
        145,
        127,
        97,
        1,
        67,
        120,
        248,
        42,
        13,
        128,
        154,
        239,
        175,
        135,
        168,
        172,
        149,
        5,
        184,
        156,
        50,
        24,
        8,
        40,
        122,
        110,
        120,
        16,
        242,
        147,
        4,
        193,
        252,
        227,
        145,
        144,
        163,
        91,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        2,
        177,
        96,
        1,
        84,
        96,
        0,
        84,
        97,
        2,
        182,
        86,
        91,
        144,
        80,
        144,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        32,
        128,
        130,
        1,
        148,
        144,
        148,
        82,
        128,
        130,
        1,
        146,
        144,
        146,
        82,
        128,
        81,
        128,
        131,
        3,
        130,
        1,
        129,
        82,
        96,
        96,
        144,
        146,
        1,
        144,
        82,
        128,
        81,
        145,
        1,
        32,
        144,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        2,
        244,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        3,
        14,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        80,
        128,
        53,
        146,
        96,
        32,
        144,
        145,
        1,
        53,
        145,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        169,
        179,
        70,
        124,
        225,
        110,
        122,
        157,
        206,
        66,
        165,
        231,
        131,
        94,
        115,
        64,
        237,
        186,
        9,
        243,
        83,
        131,
        13,
        228,
        100,
        192,
        145,
        188,
        101,
        135,
        216,
        143,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static POLYGONZKEVMGLOBALEXITROOTMOCK_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        131,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        1,
        253,
        144,
        68,
        20,
        97,
        0,
        136,
        87,
        128,
        99,
        5,
        26,
        158,
        40,
        20,
        97,
        0,
        164,
        87,
        128,
        99,
        37,
        123,
        54,
        50,
        20,
        97,
        0,
        185,
        87,
        128,
        99,
        49,
        156,
        247,
        53,
        20,
        97,
        0,
        217,
        87,
        128,
        99,
        51,
        214,
        36,
        125,
        20,
        97,
        0,
        226,
        87,
        128,
        99,
        62,
        214,
        145,
        239,
        20,
        97,
        0,
        245,
        87,
        128,
        99,
        91,
        206,
        246,
        115,
        20,
        97,
        0,
        253,
        87,
        128,
        99,
        94,
        198,
        168,
        223,
        20,
        97,
        1,
        29,
        87,
        128,
        99,
        163,
        197,
        115,
        235,
        20,
        97,
        1,
        92,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        145,
        96,
        0,
        84,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        183,
        97,
        0,
        178,
        54,
        96,
        4,
        97,
        2,
        226,
        86,
        91,
        97,
        1,
        131,
        86,
        91,
        0,
        91,
        97,
        0,
        145,
        97,
        0,
        199,
        54,
        96,
        4,
        97,
        2,
        226,
        86,
        91,
        96,
        2,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        97,
        0,
        145,
        96,
        1,
        84,
        129,
        86,
        91,
        97,
        0,
        183,
        97,
        0,
        240,
        54,
        96,
        4,
        97,
        2,
        226,
        86,
        91,
        97,
        1,
        164,
        86,
        91,
        97,
        0,
        145,
        97,
        2,
        161,
        86,
        91,
        97,
        0,
        183,
        97,
        1,
        11,
        54,
        96,
        4,
        97,
        2,
        251,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        144,
        145,
        32,
        85,
        86,
        91,
        97,
        1,
        68,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        155,
        86,
        91,
        97,
        1,
        68,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        128,
        96,
        2,
        96,
        0,
        97,
        1,
        144,
        97,
        2,
        161,
        86,
        91,
        129,
        82,
        96,
        32,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        64,
        1,
        96,
        0,
        32,
        85,
        80,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        51,
        3,
        97,
        1,
        230,
        87,
        80,
        96,
        1,
        130,
        144,
        85,
        129,
        97,
        2,
        60,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        51,
        3,
        97,
        2,
        35,
        87,
        96,
        0,
        131,
        144,
        85,
        130,
        145,
        80,
        97,
        2,
        60,
        86,
        91,
        96,
        64,
        81,
        99,
        180,
        147,
        101,
        221,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        97,
        2,
        72,
        130,
        132,
        97,
        2,
        182,
        86,
        91,
        96,
        0,
        129,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        145,
        146,
        80,
        3,
        97,
        2,
        155,
        87,
        96,
        0,
        129,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        128,
        130,
        32,
        66,
        144,
        85,
        81,
        132,
        145,
        132,
        145,
        127,
        97,
        1,
        67,
        120,
        248,
        42,
        13,
        128,
        154,
        239,
        175,
        135,
        168,
        172,
        149,
        5,
        184,
        156,
        50,
        24,
        8,
        40,
        122,
        110,
        120,
        16,
        242,
        147,
        4,
        193,
        252,
        227,
        145,
        144,
        163,
        91,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        2,
        177,
        96,
        1,
        84,
        96,
        0,
        84,
        97,
        2,
        182,
        86,
        91,
        144,
        80,
        144,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        32,
        128,
        130,
        1,
        148,
        144,
        148,
        82,
        128,
        130,
        1,
        146,
        144,
        146,
        82,
        128,
        81,
        128,
        131,
        3,
        130,
        1,
        129,
        82,
        96,
        96,
        144,
        146,
        1,
        144,
        82,
        128,
        81,
        145,
        1,
        32,
        144,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        2,
        244,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        3,
        14,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        80,
        128,
        53,
        146,
        96,
        32,
        144,
        145,
        1,
        53,
        145,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        169,
        179,
        70,
        124,
        225,
        110,
        122,
        157,
        206,
        66,
        165,
        231,
        131,
        94,
        115,
        64,
        237,
        186,
        9,
        243,
        83,
        131,
        13,
        228,
        100,
        192,
        145,
        188,
        101,
        135,
        216,
        143,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static POLYGONZKEVMGLOBALEXITROOTMOCK_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct PolygonZkEVMGlobalExitRootMock<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for PolygonZkEVMGlobalExitRootMock<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for PolygonZkEVMGlobalExitRootMock<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for PolygonZkEVMGlobalExitRootMock<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for PolygonZkEVMGlobalExitRootMock<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(PolygonZkEVMGlobalExitRootMock))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> PolygonZkEVMGlobalExitRootMock<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                POLYGONZKEVMGLOBALEXITROOTMOCK_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                POLYGONZKEVMGLOBALEXITROOTMOCK_ABI.clone(),
                POLYGONZKEVMGLOBALEXITROOTMOCK_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `bridgeAddress` (0xa3c573eb) function
        pub fn bridge_address(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([163, 197, 115, 235], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getLastGlobalExitRoot` (0x3ed691ef) function
        pub fn get_last_global_exit_root(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([62, 214, 145, 239], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `globalExitRootMap` (0x257b3632) function
        pub fn global_exit_root_map(
            &self,
            p0: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([37, 123, 54, 50], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `lastMainnetExitRoot` (0x319cf735) function
        pub fn last_mainnet_exit_root(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([49, 156, 247, 53], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `lastRollupExitRoot` (0x01fd9044) function
        pub fn last_rollup_exit_root(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([1, 253, 144, 68], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `rollupAddress` (0x5ec6a8df) function
        pub fn rollup_address(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([94, 198, 168, 223], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setGlobalExitRoot` (0x5bcef673) function
        pub fn set_global_exit_root(
            &self,
            global_exit_root: [u8; 32],
            timestamp: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([91, 206, 246, 115], (global_exit_root, timestamp))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setLastGlobalExitRoot` (0x051a9e28) function
        pub fn set_last_global_exit_root(
            &self,
            timestamp: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([5, 26, 158, 40], timestamp)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `updateExitRoot` (0x33d6247d) function
        pub fn update_exit_root(
            &self,
            new_root: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([51, 214, 36, 125], new_root)
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `UpdateGlobalExitRoot` event
        pub fn update_global_exit_root_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, UpdateGlobalExitRootFilter>
        {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, UpdateGlobalExitRootFilter>
        {
            self.0
                .event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
        for PolygonZkEVMGlobalExitRootMock<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `OnlyAllowedContracts` with signature `OnlyAllowedContracts()` and selector `0xb49365dd`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[etherror(name = "OnlyAllowedContracts", abi = "OnlyAllowedContracts()")]
    pub struct OnlyAllowedContracts;
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethevent(
        name = "UpdateGlobalExitRoot",
        abi = "UpdateGlobalExitRoot(bytes32,bytes32)"
    )]
    pub struct UpdateGlobalExitRootFilter {
        #[ethevent(indexed)]
        pub mainnet_exit_root: [u8; 32],
        #[ethevent(indexed)]
        pub rollup_exit_root: [u8; 32],
    }
    ///Container type for all input parameters for the `bridgeAddress` function with signature `bridgeAddress()` and selector `0xa3c573eb`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "bridgeAddress", abi = "bridgeAddress()")]
    pub struct BridgeAddressCall;
    ///Container type for all input parameters for the `getLastGlobalExitRoot` function with signature `getLastGlobalExitRoot()` and selector `0x3ed691ef`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "getLastGlobalExitRoot", abi = "getLastGlobalExitRoot()")]
    pub struct GetLastGlobalExitRootCall;
    ///Container type for all input parameters for the `globalExitRootMap` function with signature `globalExitRootMap(bytes32)` and selector `0x257b3632`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "globalExitRootMap", abi = "globalExitRootMap(bytes32)")]
    pub struct GlobalExitRootMapCall(pub [u8; 32]);
    ///Container type for all input parameters for the `lastMainnetExitRoot` function with signature `lastMainnetExitRoot()` and selector `0x319cf735`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "lastMainnetExitRoot", abi = "lastMainnetExitRoot()")]
    pub struct LastMainnetExitRootCall;
    ///Container type for all input parameters for the `lastRollupExitRoot` function with signature `lastRollupExitRoot()` and selector `0x01fd9044`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "lastRollupExitRoot", abi = "lastRollupExitRoot()")]
    pub struct LastRollupExitRootCall;
    ///Container type for all input parameters for the `rollupAddress` function with signature `rollupAddress()` and selector `0x5ec6a8df`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "rollupAddress", abi = "rollupAddress()")]
    pub struct RollupAddressCall;
    ///Container type for all input parameters for the `setGlobalExitRoot` function with signature `setGlobalExitRoot(bytes32,uint256)` and selector `0x5bcef673`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "setGlobalExitRoot", abi = "setGlobalExitRoot(bytes32,uint256)")]
    pub struct SetGlobalExitRootCall {
        pub global_exit_root: [u8; 32],
        pub timestamp: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `setLastGlobalExitRoot` function with signature `setLastGlobalExitRoot(uint256)` and selector `0x051a9e28`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "setLastGlobalExitRoot", abi = "setLastGlobalExitRoot(uint256)")]
    pub struct SetLastGlobalExitRootCall {
        pub timestamp: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `updateExitRoot` function with signature `updateExitRoot(bytes32)` and selector `0x33d6247d`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "updateExitRoot", abi = "updateExitRoot(bytes32)")]
    pub struct UpdateExitRootCall {
        pub new_root: [u8; 32],
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum PolygonZkEVMGlobalExitRootMockCalls {
        BridgeAddress(BridgeAddressCall),
        GetLastGlobalExitRoot(GetLastGlobalExitRootCall),
        GlobalExitRootMap(GlobalExitRootMapCall),
        LastMainnetExitRoot(LastMainnetExitRootCall),
        LastRollupExitRoot(LastRollupExitRootCall),
        RollupAddress(RollupAddressCall),
        SetGlobalExitRoot(SetGlobalExitRootCall),
        SetLastGlobalExitRoot(SetLastGlobalExitRootCall),
        UpdateExitRoot(UpdateExitRootCall),
    }
    impl ::ethers::core::abi::AbiDecode for PolygonZkEVMGlobalExitRootMockCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <BridgeAddressCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::BridgeAddress(decoded));
            }
            if let Ok(decoded) =
                <GetLastGlobalExitRootCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::GetLastGlobalExitRoot(decoded));
            }
            if let Ok(decoded) =
                <GlobalExitRootMapCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::GlobalExitRootMap(decoded));
            }
            if let Ok(decoded) =
                <LastMainnetExitRootCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::LastMainnetExitRoot(decoded));
            }
            if let Ok(decoded) =
                <LastRollupExitRootCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::LastRollupExitRoot(decoded));
            }
            if let Ok(decoded) = <RollupAddressCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::RollupAddress(decoded));
            }
            if let Ok(decoded) =
                <SetGlobalExitRootCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::SetGlobalExitRoot(decoded));
            }
            if let Ok(decoded) =
                <SetLastGlobalExitRootCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::SetLastGlobalExitRoot(decoded));
            }
            if let Ok(decoded) =
                <UpdateExitRootCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::UpdateExitRoot(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for PolygonZkEVMGlobalExitRootMockCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::BridgeAddress(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::GetLastGlobalExitRoot(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GlobalExitRootMap(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::LastMainnetExitRoot(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::LastRollupExitRoot(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RollupAddress(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::SetGlobalExitRoot(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::SetLastGlobalExitRoot(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::UpdateExitRoot(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for PolygonZkEVMGlobalExitRootMockCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::BridgeAddress(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetLastGlobalExitRoot(element) => ::core::fmt::Display::fmt(element, f),
                Self::GlobalExitRootMap(element) => ::core::fmt::Display::fmt(element, f),
                Self::LastMainnetExitRoot(element) => ::core::fmt::Display::fmt(element, f),
                Self::LastRollupExitRoot(element) => ::core::fmt::Display::fmt(element, f),
                Self::RollupAddress(element) => ::core::fmt::Display::fmt(element, f),
                Self::SetGlobalExitRoot(element) => ::core::fmt::Display::fmt(element, f),
                Self::SetLastGlobalExitRoot(element) => ::core::fmt::Display::fmt(element, f),
                Self::UpdateExitRoot(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<BridgeAddressCall> for PolygonZkEVMGlobalExitRootMockCalls {
        fn from(value: BridgeAddressCall) -> Self {
            Self::BridgeAddress(value)
        }
    }
    impl ::core::convert::From<GetLastGlobalExitRootCall> for PolygonZkEVMGlobalExitRootMockCalls {
        fn from(value: GetLastGlobalExitRootCall) -> Self {
            Self::GetLastGlobalExitRoot(value)
        }
    }
    impl ::core::convert::From<GlobalExitRootMapCall> for PolygonZkEVMGlobalExitRootMockCalls {
        fn from(value: GlobalExitRootMapCall) -> Self {
            Self::GlobalExitRootMap(value)
        }
    }
    impl ::core::convert::From<LastMainnetExitRootCall> for PolygonZkEVMGlobalExitRootMockCalls {
        fn from(value: LastMainnetExitRootCall) -> Self {
            Self::LastMainnetExitRoot(value)
        }
    }
    impl ::core::convert::From<LastRollupExitRootCall> for PolygonZkEVMGlobalExitRootMockCalls {
        fn from(value: LastRollupExitRootCall) -> Self {
            Self::LastRollupExitRoot(value)
        }
    }
    impl ::core::convert::From<RollupAddressCall> for PolygonZkEVMGlobalExitRootMockCalls {
        fn from(value: RollupAddressCall) -> Self {
            Self::RollupAddress(value)
        }
    }
    impl ::core::convert::From<SetGlobalExitRootCall> for PolygonZkEVMGlobalExitRootMockCalls {
        fn from(value: SetGlobalExitRootCall) -> Self {
            Self::SetGlobalExitRoot(value)
        }
    }
    impl ::core::convert::From<SetLastGlobalExitRootCall> for PolygonZkEVMGlobalExitRootMockCalls {
        fn from(value: SetLastGlobalExitRootCall) -> Self {
            Self::SetLastGlobalExitRoot(value)
        }
    }
    impl ::core::convert::From<UpdateExitRootCall> for PolygonZkEVMGlobalExitRootMockCalls {
        fn from(value: UpdateExitRootCall) -> Self {
            Self::UpdateExitRoot(value)
        }
    }
    ///Container type for all return fields from the `bridgeAddress` function with signature `bridgeAddress()` and selector `0xa3c573eb`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct BridgeAddressReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `getLastGlobalExitRoot` function with signature `getLastGlobalExitRoot()` and selector `0x3ed691ef`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetLastGlobalExitRootReturn(pub [u8; 32]);
    ///Container type for all return fields from the `globalExitRootMap` function with signature `globalExitRootMap(bytes32)` and selector `0x257b3632`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GlobalExitRootMapReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `lastMainnetExitRoot` function with signature `lastMainnetExitRoot()` and selector `0x319cf735`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct LastMainnetExitRootReturn(pub [u8; 32]);
    ///Container type for all return fields from the `lastRollupExitRoot` function with signature `lastRollupExitRoot()` and selector `0x01fd9044`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct LastRollupExitRootReturn(pub [u8; 32]);
    ///Container type for all return fields from the `rollupAddress` function with signature `rollupAddress()` and selector `0x5ec6a8df`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct RollupAddressReturn(pub ::ethers::core::types::Address);
}

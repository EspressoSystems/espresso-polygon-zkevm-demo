pub use verifier_rollup_helper_mock::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod verifier_rollup_helper_mock {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\",\"components\":[]},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\",\"components\":[]},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\",\"components\":[]},{\"internalType\":\"uint256[1]\",\"name\":\"input\",\"type\":\"uint256[1]\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static VERIFIERROLLUPHELPERMOCK_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        1,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        96,
        15,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        96,
        40,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        67,
        117,
        59,
        77,
        20,
        96,
        45,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        96,
        66,
        96,
        56,
        54,
        96,
        4,
        96,
        108,
        86,
        91,
        96,
        1,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        128,
        96,
        64,
        129,
        1,
        131,
        16,
        21,
        96,
        102,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        97,
        1,
        32,
        128,
        134,
        136,
        3,
        18,
        21,
        96,
        131,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        139,
        135,
        135,
        96,
        86,
        86,
        91,
        148,
        80,
        96,
        192,
        134,
        1,
        135,
        129,
        17,
        21,
        96,
        157,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        64,
        135,
        1,
        148,
        80,
        96,
        171,
        136,
        130,
        96,
        86,
        86,
        91,
        147,
        80,
        80,
        134,
        129,
        135,
        1,
        17,
        21,
        96,
        188,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        146,
        149,
        145,
        148,
        80,
        146,
        97,
        1,
        0,
        1,
        145,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        192,
        224,
        0,
        237,
        21,
        57,
        158,
        139,
        65,
        75,
        254,
        206,
        147,
        7,
        88,
        236,
        1,
        91,
        69,
        205,
        12,
        9,
        143,
        100,
        56,
        37,
        71,
        243,
        172,
        38,
        159,
        46,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static VERIFIERROLLUPHELPERMOCK_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        96,
        15,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        96,
        40,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        67,
        117,
        59,
        77,
        20,
        96,
        45,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        96,
        66,
        96,
        56,
        54,
        96,
        4,
        96,
        108,
        86,
        91,
        96,
        1,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        128,
        96,
        64,
        129,
        1,
        131,
        16,
        21,
        96,
        102,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        97,
        1,
        32,
        128,
        134,
        136,
        3,
        18,
        21,
        96,
        131,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        139,
        135,
        135,
        96,
        86,
        86,
        91,
        148,
        80,
        96,
        192,
        134,
        1,
        135,
        129,
        17,
        21,
        96,
        157,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        64,
        135,
        1,
        148,
        80,
        96,
        171,
        136,
        130,
        96,
        86,
        86,
        91,
        147,
        80,
        80,
        134,
        129,
        135,
        1,
        17,
        21,
        96,
        188,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        146,
        149,
        145,
        148,
        80,
        146,
        97,
        1,
        0,
        1,
        145,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        192,
        224,
        0,
        237,
        21,
        57,
        158,
        139,
        65,
        75,
        254,
        206,
        147,
        7,
        88,
        236,
        1,
        91,
        69,
        205,
        12,
        9,
        143,
        100,
        56,
        37,
        71,
        243,
        172,
        38,
        159,
        46,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static VERIFIERROLLUPHELPERMOCK_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct VerifierRollupHelperMock<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for VerifierRollupHelperMock<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for VerifierRollupHelperMock<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for VerifierRollupHelperMock<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for VerifierRollupHelperMock<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(VerifierRollupHelperMock))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> VerifierRollupHelperMock<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                VERIFIERROLLUPHELPERMOCK_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                VERIFIERROLLUPHELPERMOCK_ABI.clone(),
                VERIFIERROLLUPHELPERMOCK_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `verifyProof` (0x43753b4d) function
        pub fn verify_proof(
            &self,
            a: [::ethers::core::types::U256; 2],
            b: [[::ethers::core::types::U256; 2]; 2],
            c: [::ethers::core::types::U256; 2],
            input: [::ethers::core::types::U256; 1],
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([67, 117, 59, 77], (a, b, c, input))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
        for VerifierRollupHelperMock<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `verifyProof` function with signature `verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[1])` and selector `0x43753b4d`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "verifyProof",
        abi = "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[1])"
    )]
    pub struct VerifyProofCall {
        pub a: [::ethers::core::types::U256; 2],
        pub b: [[::ethers::core::types::U256; 2]; 2],
        pub c: [::ethers::core::types::U256; 2],
        pub input: [::ethers::core::types::U256; 1],
    }
    ///Container type for all return fields from the `verifyProof` function with signature `verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[1])` and selector `0x43753b4d`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct VerifyProofReturn(pub bool);
}
